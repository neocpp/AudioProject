/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "SoxProcessor.h"

extern "C"
JNIEXPORT void JNICALL Java_com_lib_sox_SoxJni_addReverb
        (JNIEnv *env, jobject jobj, jstring infile, jstring outfile,
         jint reverbrance,
         jint hFDamping, jint roomScale,
         jint stereoDepth, jint preDelay, jint wetGain) {
    SoxProcessor *soxProcessor = new SoxProcessor();
    soxProcessor->init();
    const char *inpath = env->GetStringUTFChars(infile, 0);
    const char *outpath = env->GetStringUTFChars(outfile, 0);
    soxProcessor->processFile((char *) inpath, (char *) outpath, reverbrance, hFDamping, roomScale,
                              stereoDepth, preDelay, wetGain);
    env->ReleaseStringUTFChars(infile, inpath);
    env->ReleaseStringUTFChars(outfile, outpath);
    soxProcessor->uninit();
}

extern "C"
JNIEXPORT jint JNICALL Java_com_lib_sox_SoxJni_processBuffer
        (JNIEnv *env, jclass cls, jbyteArray inData, jint inSize, jbyteArray outData,
         jint sampleRate, jint channel, jint reverbrance,
         jint hFDamping, jint roomScale,
         jint stereoDepth, jint preDelay, jint wetGain) {
    SoxProcessor *soxProcessor = new SoxProcessor();
    soxProcessor->init();

    char *data = new char[inSize];
    env->GetByteArrayRegion(inData, 0, inSize, reinterpret_cast<jbyte *>(data));
    char *outBuffer;
    int outSize = soxProcessor->processBuffer(data, inSize, outBuffer, sampleRate, channel,
                                              reverbrance,
                                              hFDamping, roomScale, stereoDepth,
                                              preDelay, wetGain);
    env->SetByteArrayRegion(outData, 0, outSize, (jbyte *) outBuffer);
    soxProcessor->uninit();

    return outSize;
}


